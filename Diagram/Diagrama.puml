@startuml TaskerApp

class APP{
    - tarea: Tarea

    - completada: LISTA <Tarea>
    - pendiente: Lista <Tarea>

    - buscador: Busqueda

    - admin: Gestor


    +buscarTarea()

    +ordenarTarea()
    
    +crearTarea()
    +editarTarea()
    +eliminarTarea()
    
}

class Tarea{
    - titulo: string
    - descripción: string
    - fechaDeVencimiento: number
    - prioridad: Prioridad
    - categoria:string
    - etiqueta:string
    - porcentajeDeAvance: number

    + getters&setters()
}


interface Gestor{
    + crearTarea()
    + editarTarea()
    + eliminarTarea()
}

class Ordenamiento{
    + ordenarPorTitulo(valor:string):MyNode<T>
    + ordenarPorFecha(valor: Date):MyNode<T>
    '+ ordenarPorPrioridad(valor:string):MyNode<T>
}

class Busqueda{
    + buscarPorTitulo(valor:string):MyNode<T>
    + buscarPorFecha(valor: Date):MyNode<T>
    '+ busquedaPorPrioridad(valor:string):MyNode<T>
}

class LISTA{
    - head: MyNode<T>;
    + insertOrdered(value: Tarea): MyNode<Tarea>
}

class MyNode<Tarea>{
    - value: T
    - next: MyNode<T>

    + getter&setter()

}

enum Prioridad{
    ALTA,
    MEDIA,
    BAJA;
}

APP -u-> Busqueda
APP -u-> Ordenamiento
APP .l.|> Gestor
APP *-r- LISTA: Composición (APP contiene listas de tareas).
APP ..> Tarea: Dependencia (APP interactúa con tareas).

LISTA *-- MyNode: Composición
MyNode ..> Tarea: Dependencia (MyNode almacena una tarea).

@enduml

Creo tarea 1:
[
    Lista
    [
        tarea1{propiedades}
    ]
]

Creo tarea 2:
[
    Lista
    [
        tarea1{propiedades}
        tarea2{propiedades}
    ]
]

crearTarea() {
    //codigo para la creacion

    //push tarea
}

editarTarea() {

}

tarea3{"..","descripcion"...}